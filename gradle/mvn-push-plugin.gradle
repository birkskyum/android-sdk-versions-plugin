/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'java'

def isReleaseBuild() {
    return !VERSION_NAME.contains("SNAPSHOT")
}

def static isLocalBuild() {
    if (System.getenv('IS_LOCAL_DEVELOPMENT') != null) {
        return System.getenv('IS_LOCAL_DEVELOPMENT').toBoolean()
    }
    return true
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL
            : "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL
            : "https://oss.sonatype.org/content/repositories/snapshots/"
}

def obtainMavenLocalUrl() {
    return getRepositories().mavenLocal().getUrl()
}

def getRepositoryUsername() {
    return hasProperty('NEXUS_USERNAME') ? NEXUS_USERNAME : ""
}

def getRepositoryPassword() {
    return hasProperty('NEXUS_PASSWORD') ? NEXUS_PASSWORD : ""
}

group = GROUP
version = VERSION_NAME

java {
    withJavadocJar()
    withSourcesJar()
}

task groovyDocs(type: Groovydoc) {
    def sources = project.sourceSets.main.allGroovy
    source = sources
    classpath = project.sourceSets.main.output + project.sourceSets.main.compileClasspath
}

task groovyDocsJar(type: Jar, dependsOn: groovyDocs) {
    archiveClassifier = 'groovydoc'
    from groovyDocs.destinationDir
}

afterEvaluate { project ->
    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
                artifact(groovyDocsJar)
                pom {
                    name = POM_NAME
                    packaging = POM_PACKAGING
                    description = POM_DESCRIPTION
                    url = POM_URL
                    artifactId = POM_ARTIFACT_ID

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                            distribution = POM_LICENCE_DIST
                        }
                    }
                    developers {
                        developer {
                            id = POM_DEVELOPER_ID
                            name = POM_DEVELOPER_NAME
                        }
                    }
                    scm {
                        url = POM_SCM_URL
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEV_CONNECTION
                    }
                }
            }
        }
        repositories {
            maven {
                // change URLs to point to your repos, e.g. http://my.org/repo
                def releasesRepoUrl = getReleaseRepositoryUrl()
                def snapshotsRepoUrl = getSnapshotRepositoryUrl()
                def localUrl = obtainMavenLocalUrl()
                url = isLocalBuild() ? localUrl : isReleaseBuild() ? releasesRepoUrl : snapshotsRepoUrl
                credentials {
                    username = isLocalBuild() ? "" : getRepositoryUsername()
                    password = isLocalBuild() ? "" : getRepositoryPassword()
                }
            }
        }
    }

    signing {
        required { isReleaseBuild() && gradle.taskGraph.hasTask("publish") }
        sign publishing.publications.mavenJava
    }

    javadoc {
        if (JavaVersion.current().isJava9Compatible()) {
            options.addBooleanOption('html5', true)
        }
    }
}

